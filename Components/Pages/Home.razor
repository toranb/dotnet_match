@page "/"
@rendermode InteractiveServer

@using Match.Models
@using Match.Services

@inject IGameService GameService

<PageTitle>Match</PageTitle>

<div class="max-w-xs md:max-w-lg">
  <div class="cards">
      @foreach (var item in state.Cards)
      {
          <div @onclick="() => FlipCard(item)" class="@GetCardClasses(item)">
            <div class="back"></div>
            <div class="front" style="@GetCardStyles(item)"></div>
          </div>
      }
  </div>

  @if(state.Winner) {
    <div class="fixed inset-0 z-50 bg-white bg-opacity-25 backdrop-blur-sm flex items-center justify-center p-4">
        <div class="relative z-50 bg-white rounded-lg shadow-xl w-full max-w-sm p-6 transform transition-all">
          <div class="flex flex-col items-center gap-4">
          <h2 class="text-2xl font-bold text-center text-gray-900">You Won!</h2>
          <button @onclick="() => Restart()" class="mt-4 w-full bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors duration-200 font-medium">
            New Game
          </button>
        </div>
      </div>
    </div>
  }
</div>

@code {
    private Engine state;

    protected override void OnInitialized()
    {
      state = GameService.NewGame();
    }

    private string GetCardClasses(Card card)
    {
      if (card.Paired) return "card found";
      if (card.Flipped) return "card flipped";
      return "card";
    }

    private string GetCardStyles(Card card)
    {
      return $"background-image: url({card.ImageUrl})";
    }

    private void UnFlip(Engine currentState)
    {
      state = GameService.UnFlip(currentState);
    }

    private void FlipCard(Card card)
    {
      state = GameService.FlipCard(state, card);

      if (state.Animating) {
        _ = Task.Run(async () =>
        {
            await Task.Delay(1000);
            UnFlip(state);
            await InvokeAsync(StateHasChanged);
        });
      }
    }

    private void Restart()
    {
      state = GameService.NewGame();
    }
}
